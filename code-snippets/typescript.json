{
  "TypeScript Template": {
    "prefix": "tst",
    "body": [
      "\"use strict\";",
      "",
      "/**",
      " * ",
      " * @author xgqfrms",
      " * @license MIT",
      " * @copyright xgqfrms",
      " * @created 2023-02-1$1",
      " * @modified ",
      " * ",
      " * @description ",
      " * @description ",
      " * @difficulty Easy",
      " * @difficulty Medium",
      " * @difficulty Hard",
      " * @ime_complexity O(n)",
      " * @space_complexity O(n)",
      " * @augments ",
      " * @example ",
      " * @link https://leetcode.com/problems/$2/",
      " * @link https://leetcode.cn/problems/$2/",
      " * @solutions ",
      " * ",
      " * @best_solutions ",
      " * ",
      " */",
      "",
      "export {};",
      "",
      "const log = console.log;",
      "",
      "// ",
      "",
      "",
      "",
      "/*",
      "",
      "class TreeNode {",
      "  val: number;",
      "  left: TreeNode | null;",
      "  right: TreeNode | null;",
      "  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {",
      "    this.val = (val === undefined ? 0 : val);",
      "    this.left = (left === undefined ? null : left);",
      "    this.right = (right === undefined ? null : right);",
      "  }",
      "}",
      "",
      "// LeetCode tree test case",
      "// 二叉树生成原理：递归依次遍历（左=>右），遇到 null 返回 (✅ null 后面不能有子节点了)",
      "const BinaryTreeGenerator = (arr:number[] = [], i = 0): (TreeNode | null) => {",
      "  if(arr.length === 0 || i > arr.length - 1 || arr[i] === null) {",
      "    return null;",
      "  }",
      "  const node = new TreeNode(arr[i]);",
      "  // 先左后右， 依次遍历",
      "  node.left = BinaryTreeGenerator(arr, 2 * i + 1);",
      "  node.right = BinaryTreeGenerator(arr, 2 * i + 2);",
      "  return node;",
      "}",
      "*/",
      "",
      "/*",
      "",
      "// 测试用例 test cases",
      "const testCases = [",
      "  {",
      "    inputs: [],",
      "    input: '4193 with words  ',",
      "    result: 4193,",
      "    desc: 'value equal to 4193',",
      "  },",
      "];",
      "",
      "for (const [i, testCase] of testCases.entries()) {",
      "  const tree = BinaryTreeGenerator(testCase.input);",
      "  const result = invertTree(tree);",
      "  const treeResult = BinaryTreeGenerator(testCase.result);",
      "  log(`test case \\${i} result: `, JSON.stringify(result) === JSON.stringify(treeResult) ? `✅ passed` : `❌ failed`, testCase.result);",
      "",
      "  const [first, second] = testCase.inputs;",
      "  const result = $4(first, second);",
      "  log(`test case \\${i} result: `, JSON.stringify(result) === JSON.stringify(testCase.result) ? `✅ passed` : `❌ failed`, result);",
      "  const result = $4(testCase.input);",
      "  log(`test case \\${i} result: `, result === testCase.result ? `✅ passed` : `❌ failed`, result);",
      "  // log(`test case ${i} =`, testCase);",
      "}",
      "",
      "*/",
      "",
      "",
      "// $ npx ts-node ./$3\\ $2.ts",
      "",
      "/*",
      "",
      "",
      "",
      "*/",
      ""
    ],
    "description": "TypeScript Template & code snippets!"
  }
}
